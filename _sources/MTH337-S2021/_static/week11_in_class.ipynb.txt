{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## week 11\n",
    "\n",
    "Write code that opens a text file quiz.txt for reading and prints the first line of this text file.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Apples\n",
      "\n"
     ]
    }
   ],
   "source": [
    "f=open(\"grocery.txt\",\"r\")\n",
    "print(f.readline())\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Apples\\n'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f=open(\"grocery.txt\",\"r\")\n",
    "lines=f.readlines()\n",
    "f.close()\n",
    "\n",
    "lines[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "f=open(\"grocery.txt\",\"r\")\n",
    "text=f.read()\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Apples\\neggs\\nmilk\\nSupreme pizza\\nchips'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Apples'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k=text.find(\"\\n\")\n",
    "text[:k]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Apples'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text.split(\"\\n\")[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(1) Write the code that takes the string `mystr` separates every word in the list `mylist`. You can assume\n",
    "that all of the words in `mystr` are separated only by the space character.\n",
    "\n",
    "(2) Write the code that given `mylist` from question 1, puts it back together in the original string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "mystr=\"Which method is the most efficient\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Which', 'method', 'is', 'the', 'most', 'efficient']\n"
     ]
    }
   ],
   "source": [
    "mylist=mystr.split(\" \")\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Which method is the most efficient'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\" \".join(mylist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(5) Write code that opens a text file quiz.txt for reading, reads all the lines and puts them in a list,\n",
    "and then join the lines in a string on the character ’&&’\n",
    "\n",
    "\n",
    "(6) Write code that opens a text file quiz.txt for writing and appends the word ’potato’ at the end of\n",
    "the file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Apples\\n', 'eggs\\n', 'milk\\n', 'Supreme pizza\\n', 'chips']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f=open(\"grocery.txt\",\"r\")\n",
    "lines=f.readlines()\n",
    "f.close()\n",
    "\n",
    "lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Apples\\n&&eggs\\n&&milk\\n&&Supreme pizza\\n&&chips'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"&&\".join(lines)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "f=open(\"grocery.txt\",\"a\")\n",
    "f.write(\"\\npotato\")\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"grocery.txt\",\"a\") as f:\n",
    "    f.write(\"\\noranges\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write the code to replace each a and e in mystr with their upper case version.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "mystr=mystr.replace('a',\"A\")\n",
    "mystr=mystr.replace(\"e\",\"E\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Which mEthod is thE most EfficiEnt'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mystr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'WhIch mEthOd Is thE mOst EffIcIEnt'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = 'oi'\n",
    "\n",
    "for letter in r:\n",
    "    mystr=mystr.replace(letter,letter.upper())\n",
    "mystr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Which mEthod is thE most EfficiEnt'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r = 'OI'\n",
    "k = 'oi'\n",
    "\n",
    "for i in range(2):\n",
    "    mystr=mystr.replace(r[i],k[i])\n",
    "mystr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "\n",
    "url=\"https://scassani.github.io/MTH337-S2021/_downloads/74af82a6b009f7e6692546a8bc09cbda/gulliver.txt\"\n",
    "verne = requests.get(url).text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "skip = \".,;:()_-\\\"?!<>$&*#\\n\\r[]\\{\\}\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ex.** clean the book (replace all of these symbols with a space character). Replace the `'` with nothing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "for char in skip:\n",
    "    verne=verne.replace(char,\" \")\n",
    "    \n",
    "verne=verne.replace(\"'\",\"\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "278417"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(verne)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GULLIVERS',\n",
       " 'TRAVELS',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'Into',\n",
       " 'Several',\n",
       " 'Remote',\n",
       " 'Regions',\n",
       " 'of',\n",
       " 'the',\n",
       " 'World',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'by',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'JONATHAN',\n",
       " 'SWIFT',\n",
       " '',\n",
       " 'D',\n",
       " 'D',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'Edited',\n",
       " 'with',\n",
       " 'Introduction',\n",
       " 'and',\n",
       " 'Notes',\n",
       " 'by',\n",
       " 'Thomas',\n",
       " 'M',\n",
       " '',\n",
       " 'Balliet',\n",
       " '',\n",
       " 'Superintendent',\n",
       " 'of',\n",
       " 'Schools',\n",
       " '',\n",
       " 'Springfield',\n",
       " '',\n",
       " 'Mass',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'With',\n",
       " 'Thirty',\n",
       " 'Eight',\n",
       " 'Illustrations',\n",
       " 'and',\n",
       " 'a',\n",
       " 'Map',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'PART',\n",
       " 'I',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'A',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'LILLIPUT',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'PART',\n",
       " 'II',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'A',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'BROBDINGNAG',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'Illustration',\n",
       " '',\n",
       " '',\n",
       " 'HE',\n",
       " 'COMMANDED',\n",
       " 'HIS',\n",
       " 'GENERALS',\n",
       " 'TO',\n",
       " 'DRAW',\n",
       " 'UP',\n",
       " 'THE',\n",
       " 'TROOPS',\n",
       " '',\n",
       " '',\n",
       " 'P',\n",
       " '',\n",
       " '42',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'D',\n",
       " 'C',\n",
       " '',\n",
       " 'Heath',\n",
       " '',\n",
       " '',\n",
       " 'Co',\n",
       " '',\n",
       " '',\n",
       " 'Publishers',\n",
       " '',\n",
       " 'Boston',\n",
       " 'New',\n",
       " 'York',\n",
       " 'Chicago',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '1900',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'PREFACE',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'And',\n",
       " 'lo',\n",
       " '',\n",
       " 'the',\n",
       " 'book',\n",
       " '',\n",
       " 'from',\n",
       " 'all',\n",
       " 'its',\n",
       " 'end',\n",
       " 'beguiled',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'A',\n",
       " 'harmless',\n",
       " 'wonder',\n",
       " 'to',\n",
       " 'some',\n",
       " 'happy',\n",
       " 'child',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'LORD',\n",
       " 'LYTTON',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'Gullivers',\n",
       " 'Travels',\n",
       " 'was',\n",
       " 'published',\n",
       " 'in',\n",
       " '1726',\n",
       " '',\n",
       " 'and',\n",
       " '',\n",
       " 'although',\n",
       " 'it',\n",
       " 'was',\n",
       " 'by',\n",
       " 'no',\n",
       " '',\n",
       " 'means',\n",
       " 'intended',\n",
       " 'for',\n",
       " 'them',\n",
       " '',\n",
       " 'the',\n",
       " 'book',\n",
       " 'was',\n",
       " 'soon',\n",
       " 'appropriated',\n",
       " 'by',\n",
       " 'the',\n",
       " 'children',\n",
       " '',\n",
       " '',\n",
       " 'who',\n",
       " 'have',\n",
       " 'ever',\n",
       " 'since',\n",
       " 'continued',\n",
       " 'to',\n",
       " 'regard',\n",
       " 'it',\n",
       " 'as',\n",
       " 'one',\n",
       " 'of',\n",
       " 'the',\n",
       " 'most',\n",
       " 'delightful',\n",
       " '',\n",
       " 'of',\n",
       " 'their',\n",
       " 'story',\n",
       " 'books',\n",
       " '',\n",
       " 'They',\n",
       " 'cannot',\n",
       " 'comprehend',\n",
       " 'the',\n",
       " 'occasion',\n",
       " 'which',\n",
       " 'provoked',\n",
       " '',\n",
       " 'the',\n",
       " 'book',\n",
       " 'nor',\n",
       " 'appreciate',\n",
       " 'the',\n",
       " 'satire',\n",
       " 'which',\n",
       " 'underlies',\n",
       " 'the',\n",
       " 'narrative',\n",
       " '',\n",
       " 'but',\n",
       " '',\n",
       " 'they',\n",
       " 'delight',\n",
       " 'in',\n",
       " 'the',\n",
       " 'wonderful',\n",
       " 'adventures',\n",
       " '',\n",
       " 'and',\n",
       " 'wander',\n",
       " 'full',\n",
       " 'of',\n",
       " 'open',\n",
       " 'eyed',\n",
       " '',\n",
       " 'astonishment',\n",
       " 'into',\n",
       " 'the',\n",
       " 'new',\n",
       " 'worlds',\n",
       " 'through',\n",
       " 'which',\n",
       " 'the',\n",
       " 'vivid',\n",
       " 'and',\n",
       " 'logically',\n",
       " '',\n",
       " 'accurate',\n",
       " 'imagination',\n",
       " 'of',\n",
       " 'the',\n",
       " 'author',\n",
       " 'so',\n",
       " 'personally',\n",
       " 'conducts',\n",
       " 'them',\n",
       " '',\n",
       " 'And',\n",
       " '',\n",
       " 'there',\n",
       " 'is',\n",
       " 'a',\n",
       " 'meaning',\n",
       " 'and',\n",
       " 'a',\n",
       " 'moral',\n",
       " 'in',\n",
       " 'the',\n",
       " 'stories',\n",
       " 'of',\n",
       " 'the',\n",
       " 'Voyages',\n",
       " 'to',\n",
       " 'Lilliput',\n",
       " '',\n",
       " 'and',\n",
       " 'Brobdingnag',\n",
       " 'which',\n",
       " 'is',\n",
       " 'entirely',\n",
       " 'apart',\n",
       " 'from',\n",
       " 'the',\n",
       " 'political',\n",
       " 'satire',\n",
       " 'they',\n",
       " '',\n",
       " 'are',\n",
       " 'intended',\n",
       " 'to',\n",
       " 'convey',\n",
       " '',\n",
       " 'a',\n",
       " 'meaning',\n",
       " 'and',\n",
       " 'a',\n",
       " 'moral',\n",
       " 'which',\n",
       " 'the',\n",
       " 'youngest',\n",
       " 'child',\n",
       " '',\n",
       " 'who',\n",
       " 'can',\n",
       " 'read',\n",
       " 'it',\n",
       " 'will',\n",
       " 'not',\n",
       " 'fail',\n",
       " 'to',\n",
       " 'seize',\n",
       " '',\n",
       " 'and',\n",
       " 'upon',\n",
       " 'which',\n",
       " 'it',\n",
       " 'is',\n",
       " 'scarcely',\n",
       " '',\n",
       " 'necessary',\n",
       " 'for',\n",
       " 'the',\n",
       " 'teacher',\n",
       " 'to',\n",
       " 'comment',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'For',\n",
       " 'young',\n",
       " 'children',\n",
       " 'the',\n",
       " 'book',\n",
       " 'combines',\n",
       " 'in',\n",
       " 'a',\n",
       " 'measure',\n",
       " 'the',\n",
       " 'interest',\n",
       " 'of',\n",
       " '',\n",
       " '',\n",
       " 'Robinson',\n",
       " 'Crusoe',\n",
       " '',\n",
       " 'and',\n",
       " 'that',\n",
       " 'of',\n",
       " 'the',\n",
       " 'fairy',\n",
       " 'tale',\n",
       " '',\n",
       " 'its',\n",
       " 'style',\n",
       " 'is',\n",
       " 'objective',\n",
       " '',\n",
       " '',\n",
       " 'the',\n",
       " 'narrative',\n",
       " 'is',\n",
       " 'simple',\n",
       " '',\n",
       " 'and',\n",
       " 'the',\n",
       " 'matter',\n",
       " 'appeals',\n",
       " 'strongly',\n",
       " 'to',\n",
       " 'the',\n",
       " 'childish',\n",
       " '',\n",
       " 'imagination',\n",
       " '',\n",
       " 'For',\n",
       " 'more',\n",
       " 'mature',\n",
       " 'boys',\n",
       " 'and',\n",
       " 'girls',\n",
       " 'and',\n",
       " 'for',\n",
       " 'adults',\n",
       " 'the',\n",
       " 'interest',\n",
       " '',\n",
       " 'is',\n",
       " 'found',\n",
       " 'chiefly',\n",
       " 'in',\n",
       " 'the',\n",
       " 'keen',\n",
       " 'satire',\n",
       " 'which',\n",
       " 'underlies',\n",
       " 'the',\n",
       " 'narrative',\n",
       " '',\n",
       " 'It',\n",
       " '',\n",
       " 'appeals',\n",
       " '',\n",
       " 'therefore',\n",
       " '',\n",
       " 'to',\n",
       " 'a',\n",
       " 'very',\n",
       " 'wide',\n",
       " 'range',\n",
       " 'of',\n",
       " 'intelligence',\n",
       " 'and',\n",
       " 'taste',\n",
       " '',\n",
       " 'and',\n",
       " '',\n",
       " 'can',\n",
       " 'be',\n",
       " 'read',\n",
       " 'with',\n",
       " 'profit',\n",
       " 'by',\n",
       " 'the',\n",
       " 'child',\n",
       " 'of',\n",
       " 'ten',\n",
       " 'and',\n",
       " 'by',\n",
       " 'the',\n",
       " 'young',\n",
       " 'man',\n",
       " 'or',\n",
       " '',\n",
       " 'woman',\n",
       " 'of',\n",
       " 'mature',\n",
       " 'years',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'This',\n",
       " 'edition',\n",
       " 'is',\n",
       " 'practically',\n",
       " 'a',\n",
       " 'reprint',\n",
       " 'of',\n",
       " 'the',\n",
       " 'original',\n",
       " '',\n",
       " '1726',\n",
       " '27',\n",
       " '',\n",
       " '',\n",
       " 'The',\n",
       " '',\n",
       " 'punctuation',\n",
       " 'and',\n",
       " 'capitalization',\n",
       " 'have',\n",
       " 'been',\n",
       " 'modernized',\n",
       " '',\n",
       " 'some',\n",
       " 'archaisms',\n",
       " '',\n",
       " 'changed',\n",
       " '',\n",
       " 'and',\n",
       " 'the',\n",
       " 'paragraphs',\n",
       " 'have',\n",
       " 'been',\n",
       " 'made',\n",
       " 'more',\n",
       " 'frequent',\n",
       " '',\n",
       " 'A',\n",
       " 'few',\n",
       " 'passages',\n",
       " '',\n",
       " 'have',\n",
       " 'been',\n",
       " 'omitted',\n",
       " 'which',\n",
       " 'would',\n",
       " 'offend',\n",
       " 'modern',\n",
       " 'ears',\n",
       " 'and',\n",
       " 'are',\n",
       " 'unsuitable',\n",
       " 'for',\n",
       " '',\n",
       " 'childrens',\n",
       " 'reading',\n",
       " '',\n",
       " 'and',\n",
       " 'some',\n",
       " 'foot',\n",
       " 'notes',\n",
       " 'have',\n",
       " 'been',\n",
       " 'added',\n",
       " 'explaining',\n",
       " '',\n",
       " 'obsolete',\n",
       " 'words',\n",
       " 'and',\n",
       " 'obscure',\n",
       " 'expressions',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'As',\n",
       " 'a',\n",
       " 'reading',\n",
       " 'book',\n",
       " 'in',\n",
       " 'school',\n",
       " 'which',\n",
       " 'must',\n",
       " 'be',\n",
       " 'adapted',\n",
       " 'to',\n",
       " 'the',\n",
       " 'average',\n",
       " 'mind',\n",
       " '',\n",
       " '',\n",
       " 'these',\n",
       " 'stories',\n",
       " 'will',\n",
       " 'be',\n",
       " 'found',\n",
       " 'suitable',\n",
       " 'for',\n",
       " 'classes',\n",
       " 'from',\n",
       " 'the',\n",
       " 'fifth',\n",
       " 'or',\n",
       " 'sixth',\n",
       " '',\n",
       " 'school',\n",
       " 'year',\n",
       " 'to',\n",
       " 'the',\n",
       " 'highest',\n",
       " 'grade',\n",
       " 'of',\n",
       " 'the',\n",
       " 'grammar',\n",
       " 'school',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'THOMAS',\n",
       " 'M',\n",
       " '',\n",
       " 'BALLIET',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CONTENTS',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'LILLIPUT',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'I',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'gives',\n",
       " 'some',\n",
       " 'account',\n",
       " 'of',\n",
       " 'himself',\n",
       " 'and',\n",
       " 'family',\n",
       " '',\n",
       " 'His',\n",
       " 'first',\n",
       " '',\n",
       " 'inducements',\n",
       " 'to',\n",
       " 'travel',\n",
       " '',\n",
       " 'He',\n",
       " 'is',\n",
       " 'shipwrecked',\n",
       " '',\n",
       " 'and',\n",
       " 'swims',\n",
       " 'for',\n",
       " 'his',\n",
       " 'life',\n",
       " '',\n",
       " 'Gets',\n",
       " '',\n",
       " 'safe',\n",
       " 'on',\n",
       " 'shore',\n",
       " 'in',\n",
       " 'the',\n",
       " 'country',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " '',\n",
       " 'Is',\n",
       " 'made',\n",
       " 'a',\n",
       " 'prisoner',\n",
       " '',\n",
       " 'and',\n",
       " '',\n",
       " 'carried',\n",
       " 'up',\n",
       " 'the',\n",
       " 'country',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'II',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'The',\n",
       " 'emperor',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " '',\n",
       " 'attended',\n",
       " 'by',\n",
       " 'several',\n",
       " 'of',\n",
       " 'the',\n",
       " 'nobility',\n",
       " '',\n",
       " 'comes',\n",
       " 'to',\n",
       " '',\n",
       " 'see',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'in',\n",
       " 'his',\n",
       " 'confinement',\n",
       " '',\n",
       " 'The',\n",
       " 'emperors',\n",
       " 'person',\n",
       " 'and',\n",
       " 'habits',\n",
       " '',\n",
       " 'described',\n",
       " '',\n",
       " 'Learned',\n",
       " 'men',\n",
       " 'appointed',\n",
       " 'to',\n",
       " 'teach',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'their',\n",
       " 'language',\n",
       " '',\n",
       " 'He',\n",
       " '',\n",
       " 'gains',\n",
       " 'favor',\n",
       " 'by',\n",
       " 'his',\n",
       " 'mild',\n",
       " 'disposition',\n",
       " '',\n",
       " 'His',\n",
       " 'pockets',\n",
       " 'are',\n",
       " 'searched',\n",
       " '',\n",
       " 'and',\n",
       " 'his',\n",
       " '',\n",
       " 'sword',\n",
       " 'and',\n",
       " 'pistols',\n",
       " 'taken',\n",
       " 'from',\n",
       " 'him',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'III',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'diverts',\n",
       " 'the',\n",
       " 'emperor',\n",
       " '',\n",
       " 'and',\n",
       " 'his',\n",
       " 'nobility',\n",
       " 'of',\n",
       " 'both',\n",
       " 'sexes',\n",
       " '',\n",
       " 'in',\n",
       " 'a',\n",
       " '',\n",
       " 'very',\n",
       " 'uncommon',\n",
       " 'manner',\n",
       " '',\n",
       " 'The',\n",
       " 'diversions',\n",
       " 'of',\n",
       " 'the',\n",
       " 'court',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " '',\n",
       " 'described',\n",
       " '',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'has',\n",
       " 'his',\n",
       " 'liberty',\n",
       " 'granted',\n",
       " 'him',\n",
       " 'upon',\n",
       " 'certain',\n",
       " '',\n",
       " 'conditions',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'IV',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'Mildendo',\n",
       " '',\n",
       " 'the',\n",
       " 'metropolis',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " '',\n",
       " 'described',\n",
       " '',\n",
       " 'together',\n",
       " 'with',\n",
       " 'the',\n",
       " '',\n",
       " 'emperors',\n",
       " 'palace',\n",
       " '',\n",
       " 'A',\n",
       " 'conversation',\n",
       " 'between',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'and',\n",
       " 'a',\n",
       " 'principal',\n",
       " '',\n",
       " 'secretary',\n",
       " 'concerning',\n",
       " 'the',\n",
       " 'affairs',\n",
       " 'of',\n",
       " 'that',\n",
       " 'empire',\n",
       " '',\n",
       " 'The',\n",
       " 'Authors',\n",
       " 'offers',\n",
       " 'to',\n",
       " '',\n",
       " 'serve',\n",
       " 'the',\n",
       " 'emperor',\n",
       " 'in',\n",
       " 'his',\n",
       " 'wars',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'V',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'The',\n",
       " 'Author',\n",
       " '',\n",
       " 'by',\n",
       " 'an',\n",
       " 'extraordinary',\n",
       " 'stratagem',\n",
       " '',\n",
       " 'prevents',\n",
       " 'an',\n",
       " 'invasion',\n",
       " '',\n",
       " 'A',\n",
       " 'high',\n",
       " '',\n",
       " 'title',\n",
       " 'of',\n",
       " 'honor',\n",
       " 'is',\n",
       " 'conferred',\n",
       " 'upon',\n",
       " 'him',\n",
       " '',\n",
       " 'Ambassadors',\n",
       " 'arrive',\n",
       " 'from',\n",
       " 'the',\n",
       " '',\n",
       " 'emperor',\n",
       " 'of',\n",
       " 'Blefuscu',\n",
       " '',\n",
       " 'and',\n",
       " 'sue',\n",
       " 'for',\n",
       " 'peace',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'VI',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'Of',\n",
       " 'the',\n",
       " 'inhabitants',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " '',\n",
       " 'their',\n",
       " 'learning',\n",
       " '',\n",
       " 'laws',\n",
       " '',\n",
       " 'and',\n",
       " 'customs',\n",
       " '',\n",
       " 'the',\n",
       " '',\n",
       " 'manner',\n",
       " 'of',\n",
       " 'educating',\n",
       " 'their',\n",
       " 'children',\n",
       " '',\n",
       " 'The',\n",
       " 'Authors',\n",
       " 'way',\n",
       " 'of',\n",
       " 'living',\n",
       " 'in',\n",
       " 'that',\n",
       " '',\n",
       " 'country',\n",
       " '',\n",
       " 'His',\n",
       " 'vindication',\n",
       " 'of',\n",
       " 'a',\n",
       " 'great',\n",
       " 'lady',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'CHAPTER',\n",
       " 'VII',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'The',\n",
       " 'Author',\n",
       " '',\n",
       " 'being',\n",
       " 'informed',\n",
       " 'of',\n",
       " 'a',\n",
       " 'design',\n",
       " 'to',\n",
       " 'accuse',\n",
       " 'him',\n",
       " 'of',\n",
       " 'high',\n",
       " 'treason',\n",
       " '',\n",
       " '',\n",
       " 'makes',\n",
       " 'his',\n",
       " 'escape',\n",
       " 'to',\n",
       " 'Blefuscu',\n",
       " '',\n",
       " 'His',\n",
       " 'reception',\n",
       " ...]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "verne.split(\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: to count the words you will need:\n",
    "1. remove the `''` characters\n",
    "2. handle capitalized letters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GULLIVERS',\n",
       " 'TRAVELS',\n",
       " 'Into',\n",
       " 'Several',\n",
       " 'Remote',\n",
       " 'Regions',\n",
       " 'of',\n",
       " 'the',\n",
       " 'World',\n",
       " 'by',\n",
       " 'JONATHAN',\n",
       " 'SWIFT',\n",
       " 'D',\n",
       " 'D',\n",
       " 'Edited',\n",
       " 'with',\n",
       " 'Introduction',\n",
       " 'and',\n",
       " 'Notes',\n",
       " 'by',\n",
       " 'Thomas',\n",
       " 'M',\n",
       " 'Balliet',\n",
       " 'Superintendent',\n",
       " 'of',\n",
       " 'Schools',\n",
       " 'Springfield',\n",
       " 'Mass',\n",
       " 'With',\n",
       " 'Thirty',\n",
       " 'Eight',\n",
       " 'Illustrations',\n",
       " 'and',\n",
       " 'a',\n",
       " 'Map',\n",
       " 'PART',\n",
       " 'I',\n",
       " 'A',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'LILLIPUT',\n",
       " 'PART',\n",
       " 'II',\n",
       " 'A',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'BROBDINGNAG',\n",
       " 'Illustration',\n",
       " 'HE',\n",
       " 'COMMANDED',\n",
       " 'HIS',\n",
       " 'GENERALS',\n",
       " 'TO',\n",
       " 'DRAW',\n",
       " 'UP',\n",
       " 'THE',\n",
       " 'TROOPS',\n",
       " 'P',\n",
       " '42',\n",
       " 'D',\n",
       " 'C',\n",
       " 'Heath',\n",
       " 'Co',\n",
       " 'Publishers',\n",
       " 'Boston',\n",
       " 'New',\n",
       " 'York',\n",
       " 'Chicago',\n",
       " '1900',\n",
       " 'PREFACE',\n",
       " 'And',\n",
       " 'lo',\n",
       " 'the',\n",
       " 'book',\n",
       " 'from',\n",
       " 'all',\n",
       " 'its',\n",
       " 'end',\n",
       " 'beguiled',\n",
       " 'A',\n",
       " 'harmless',\n",
       " 'wonder',\n",
       " 'to',\n",
       " 'some',\n",
       " 'happy',\n",
       " 'child',\n",
       " 'LORD',\n",
       " 'LYTTON',\n",
       " 'Gullivers',\n",
       " 'Travels',\n",
       " 'was',\n",
       " 'published',\n",
       " 'in',\n",
       " '1726',\n",
       " 'and',\n",
       " 'although',\n",
       " 'it',\n",
       " 'was',\n",
       " 'by',\n",
       " 'no',\n",
       " 'means',\n",
       " 'intended',\n",
       " 'for',\n",
       " 'them',\n",
       " 'the',\n",
       " 'book',\n",
       " 'was',\n",
       " 'soon',\n",
       " 'appropriated',\n",
       " 'by',\n",
       " 'the',\n",
       " 'children',\n",
       " 'who',\n",
       " 'have',\n",
       " 'ever',\n",
       " 'since',\n",
       " 'continued',\n",
       " 'to',\n",
       " 'regard',\n",
       " 'it',\n",
       " 'as',\n",
       " 'one',\n",
       " 'of',\n",
       " 'the',\n",
       " 'most',\n",
       " 'delightful',\n",
       " 'of',\n",
       " 'their',\n",
       " 'story',\n",
       " 'books',\n",
       " 'They',\n",
       " 'cannot',\n",
       " 'comprehend',\n",
       " 'the',\n",
       " 'occasion',\n",
       " 'which',\n",
       " 'provoked',\n",
       " 'the',\n",
       " 'book',\n",
       " 'nor',\n",
       " 'appreciate',\n",
       " 'the',\n",
       " 'satire',\n",
       " 'which',\n",
       " 'underlies',\n",
       " 'the',\n",
       " 'narrative',\n",
       " 'but',\n",
       " 'they',\n",
       " 'delight',\n",
       " 'in',\n",
       " 'the',\n",
       " 'wonderful',\n",
       " 'adventures',\n",
       " 'and',\n",
       " 'wander',\n",
       " 'full',\n",
       " 'of',\n",
       " 'open',\n",
       " 'eyed',\n",
       " 'astonishment',\n",
       " 'into',\n",
       " 'the',\n",
       " 'new',\n",
       " 'worlds',\n",
       " 'through',\n",
       " 'which',\n",
       " 'the',\n",
       " 'vivid',\n",
       " 'and',\n",
       " 'logically',\n",
       " 'accurate',\n",
       " 'imagination',\n",
       " 'of',\n",
       " 'the',\n",
       " 'author',\n",
       " 'so',\n",
       " 'personally',\n",
       " 'conducts',\n",
       " 'them',\n",
       " 'And',\n",
       " 'there',\n",
       " 'is',\n",
       " 'a',\n",
       " 'meaning',\n",
       " 'and',\n",
       " 'a',\n",
       " 'moral',\n",
       " 'in',\n",
       " 'the',\n",
       " 'stories',\n",
       " 'of',\n",
       " 'the',\n",
       " 'Voyages',\n",
       " 'to',\n",
       " 'Lilliput',\n",
       " 'and',\n",
       " 'Brobdingnag',\n",
       " 'which',\n",
       " 'is',\n",
       " 'entirely',\n",
       " 'apart',\n",
       " 'from',\n",
       " 'the',\n",
       " 'political',\n",
       " 'satire',\n",
       " 'they',\n",
       " 'are',\n",
       " 'intended',\n",
       " 'to',\n",
       " 'convey',\n",
       " 'a',\n",
       " 'meaning',\n",
       " 'and',\n",
       " 'a',\n",
       " 'moral',\n",
       " 'which',\n",
       " 'the',\n",
       " 'youngest',\n",
       " 'child',\n",
       " 'who',\n",
       " 'can',\n",
       " 'read',\n",
       " 'it',\n",
       " 'will',\n",
       " 'not',\n",
       " 'fail',\n",
       " 'to',\n",
       " 'seize',\n",
       " 'and',\n",
       " 'upon',\n",
       " 'which',\n",
       " 'it',\n",
       " 'is',\n",
       " 'scarcely',\n",
       " 'necessary',\n",
       " 'for',\n",
       " 'the',\n",
       " 'teacher',\n",
       " 'to',\n",
       " 'comment',\n",
       " 'For',\n",
       " 'young',\n",
       " 'children',\n",
       " 'the',\n",
       " 'book',\n",
       " 'combines',\n",
       " 'in',\n",
       " 'a',\n",
       " 'measure',\n",
       " 'the',\n",
       " 'interest',\n",
       " 'of',\n",
       " 'Robinson',\n",
       " 'Crusoe',\n",
       " 'and',\n",
       " 'that',\n",
       " 'of',\n",
       " 'the',\n",
       " 'fairy',\n",
       " 'tale',\n",
       " 'its',\n",
       " 'style',\n",
       " 'is',\n",
       " 'objective',\n",
       " 'the',\n",
       " 'narrative',\n",
       " 'is',\n",
       " 'simple',\n",
       " 'and',\n",
       " 'the',\n",
       " 'matter',\n",
       " 'appeals',\n",
       " 'strongly',\n",
       " 'to',\n",
       " 'the',\n",
       " 'childish',\n",
       " 'imagination',\n",
       " 'For',\n",
       " 'more',\n",
       " 'mature',\n",
       " 'boys',\n",
       " 'and',\n",
       " 'girls',\n",
       " 'and',\n",
       " 'for',\n",
       " 'adults',\n",
       " 'the',\n",
       " 'interest',\n",
       " 'is',\n",
       " 'found',\n",
       " 'chiefly',\n",
       " 'in',\n",
       " 'the',\n",
       " 'keen',\n",
       " 'satire',\n",
       " 'which',\n",
       " 'underlies',\n",
       " 'the',\n",
       " 'narrative',\n",
       " 'It',\n",
       " 'appeals',\n",
       " 'therefore',\n",
       " 'to',\n",
       " 'a',\n",
       " 'very',\n",
       " 'wide',\n",
       " 'range',\n",
       " 'of',\n",
       " 'intelligence',\n",
       " 'and',\n",
       " 'taste',\n",
       " 'and',\n",
       " 'can',\n",
       " 'be',\n",
       " 'read',\n",
       " 'with',\n",
       " 'profit',\n",
       " 'by',\n",
       " 'the',\n",
       " 'child',\n",
       " 'of',\n",
       " 'ten',\n",
       " 'and',\n",
       " 'by',\n",
       " 'the',\n",
       " 'young',\n",
       " 'man',\n",
       " 'or',\n",
       " 'woman',\n",
       " 'of',\n",
       " 'mature',\n",
       " 'years',\n",
       " 'This',\n",
       " 'edition',\n",
       " 'is',\n",
       " 'practically',\n",
       " 'a',\n",
       " 'reprint',\n",
       " 'of',\n",
       " 'the',\n",
       " 'original',\n",
       " '1726',\n",
       " '27',\n",
       " 'The',\n",
       " 'punctuation',\n",
       " 'and',\n",
       " 'capitalization',\n",
       " 'have',\n",
       " 'been',\n",
       " 'modernized',\n",
       " 'some',\n",
       " 'archaisms',\n",
       " 'changed',\n",
       " 'and',\n",
       " 'the',\n",
       " 'paragraphs',\n",
       " 'have',\n",
       " 'been',\n",
       " 'made',\n",
       " 'more',\n",
       " 'frequent',\n",
       " 'A',\n",
       " 'few',\n",
       " 'passages',\n",
       " 'have',\n",
       " 'been',\n",
       " 'omitted',\n",
       " 'which',\n",
       " 'would',\n",
       " 'offend',\n",
       " 'modern',\n",
       " 'ears',\n",
       " 'and',\n",
       " 'are',\n",
       " 'unsuitable',\n",
       " 'for',\n",
       " 'childrens',\n",
       " 'reading',\n",
       " 'and',\n",
       " 'some',\n",
       " 'foot',\n",
       " 'notes',\n",
       " 'have',\n",
       " 'been',\n",
       " 'added',\n",
       " 'explaining',\n",
       " 'obsolete',\n",
       " 'words',\n",
       " 'and',\n",
       " 'obscure',\n",
       " 'expressions',\n",
       " 'As',\n",
       " 'a',\n",
       " 'reading',\n",
       " 'book',\n",
       " 'in',\n",
       " 'school',\n",
       " 'which',\n",
       " 'must',\n",
       " 'be',\n",
       " 'adapted',\n",
       " 'to',\n",
       " 'the',\n",
       " 'average',\n",
       " 'mind',\n",
       " 'these',\n",
       " 'stories',\n",
       " 'will',\n",
       " 'be',\n",
       " 'found',\n",
       " 'suitable',\n",
       " 'for',\n",
       " 'classes',\n",
       " 'from',\n",
       " 'the',\n",
       " 'fifth',\n",
       " 'or',\n",
       " 'sixth',\n",
       " 'school',\n",
       " 'year',\n",
       " 'to',\n",
       " 'the',\n",
       " 'highest',\n",
       " 'grade',\n",
       " 'of',\n",
       " 'the',\n",
       " 'grammar',\n",
       " 'school',\n",
       " 'THOMAS',\n",
       " 'M',\n",
       " 'BALLIET',\n",
       " 'CONTENTS',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'LILLIPUT',\n",
       " 'CHAPTER',\n",
       " 'I',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'gives',\n",
       " 'some',\n",
       " 'account',\n",
       " 'of',\n",
       " 'himself',\n",
       " 'and',\n",
       " 'family',\n",
       " 'His',\n",
       " 'first',\n",
       " 'inducements',\n",
       " 'to',\n",
       " 'travel',\n",
       " 'He',\n",
       " 'is',\n",
       " 'shipwrecked',\n",
       " 'and',\n",
       " 'swims',\n",
       " 'for',\n",
       " 'his',\n",
       " 'life',\n",
       " 'Gets',\n",
       " 'safe',\n",
       " 'on',\n",
       " 'shore',\n",
       " 'in',\n",
       " 'the',\n",
       " 'country',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " 'Is',\n",
       " 'made',\n",
       " 'a',\n",
       " 'prisoner',\n",
       " 'and',\n",
       " 'carried',\n",
       " 'up',\n",
       " 'the',\n",
       " 'country',\n",
       " 'CHAPTER',\n",
       " 'II',\n",
       " 'The',\n",
       " 'emperor',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " 'attended',\n",
       " 'by',\n",
       " 'several',\n",
       " 'of',\n",
       " 'the',\n",
       " 'nobility',\n",
       " 'comes',\n",
       " 'to',\n",
       " 'see',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'in',\n",
       " 'his',\n",
       " 'confinement',\n",
       " 'The',\n",
       " 'emperors',\n",
       " 'person',\n",
       " 'and',\n",
       " 'habits',\n",
       " 'described',\n",
       " 'Learned',\n",
       " 'men',\n",
       " 'appointed',\n",
       " 'to',\n",
       " 'teach',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'their',\n",
       " 'language',\n",
       " 'He',\n",
       " 'gains',\n",
       " 'favor',\n",
       " 'by',\n",
       " 'his',\n",
       " 'mild',\n",
       " 'disposition',\n",
       " 'His',\n",
       " 'pockets',\n",
       " 'are',\n",
       " 'searched',\n",
       " 'and',\n",
       " 'his',\n",
       " 'sword',\n",
       " 'and',\n",
       " 'pistols',\n",
       " 'taken',\n",
       " 'from',\n",
       " 'him',\n",
       " 'CHAPTER',\n",
       " 'III',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'diverts',\n",
       " 'the',\n",
       " 'emperor',\n",
       " 'and',\n",
       " 'his',\n",
       " 'nobility',\n",
       " 'of',\n",
       " 'both',\n",
       " 'sexes',\n",
       " 'in',\n",
       " 'a',\n",
       " 'very',\n",
       " 'uncommon',\n",
       " 'manner',\n",
       " 'The',\n",
       " 'diversions',\n",
       " 'of',\n",
       " 'the',\n",
       " 'court',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " 'described',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'has',\n",
       " 'his',\n",
       " 'liberty',\n",
       " 'granted',\n",
       " 'him',\n",
       " 'upon',\n",
       " 'certain',\n",
       " 'conditions',\n",
       " 'CHAPTER',\n",
       " 'IV',\n",
       " 'Mildendo',\n",
       " 'the',\n",
       " 'metropolis',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " 'described',\n",
       " 'together',\n",
       " 'with',\n",
       " 'the',\n",
       " 'emperors',\n",
       " 'palace',\n",
       " 'A',\n",
       " 'conversation',\n",
       " 'between',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'and',\n",
       " 'a',\n",
       " 'principal',\n",
       " 'secretary',\n",
       " 'concerning',\n",
       " 'the',\n",
       " 'affairs',\n",
       " 'of',\n",
       " 'that',\n",
       " 'empire',\n",
       " 'The',\n",
       " 'Authors',\n",
       " 'offers',\n",
       " 'to',\n",
       " 'serve',\n",
       " 'the',\n",
       " 'emperor',\n",
       " 'in',\n",
       " 'his',\n",
       " 'wars',\n",
       " 'CHAPTER',\n",
       " 'V',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'by',\n",
       " 'an',\n",
       " 'extraordinary',\n",
       " 'stratagem',\n",
       " 'prevents',\n",
       " 'an',\n",
       " 'invasion',\n",
       " 'A',\n",
       " 'high',\n",
       " 'title',\n",
       " 'of',\n",
       " 'honor',\n",
       " 'is',\n",
       " 'conferred',\n",
       " 'upon',\n",
       " 'him',\n",
       " 'Ambassadors',\n",
       " 'arrive',\n",
       " 'from',\n",
       " 'the',\n",
       " 'emperor',\n",
       " 'of',\n",
       " 'Blefuscu',\n",
       " 'and',\n",
       " 'sue',\n",
       " 'for',\n",
       " 'peace',\n",
       " 'CHAPTER',\n",
       " 'VI',\n",
       " 'Of',\n",
       " 'the',\n",
       " 'inhabitants',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " 'their',\n",
       " 'learning',\n",
       " 'laws',\n",
       " 'and',\n",
       " 'customs',\n",
       " 'the',\n",
       " 'manner',\n",
       " 'of',\n",
       " 'educating',\n",
       " 'their',\n",
       " 'children',\n",
       " 'The',\n",
       " 'Authors',\n",
       " 'way',\n",
       " 'of',\n",
       " 'living',\n",
       " 'in',\n",
       " 'that',\n",
       " 'country',\n",
       " 'His',\n",
       " 'vindication',\n",
       " 'of',\n",
       " 'a',\n",
       " 'great',\n",
       " 'lady',\n",
       " 'CHAPTER',\n",
       " 'VII',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'being',\n",
       " 'informed',\n",
       " 'of',\n",
       " 'a',\n",
       " 'design',\n",
       " 'to',\n",
       " 'accuse',\n",
       " 'him',\n",
       " 'of',\n",
       " 'high',\n",
       " 'treason',\n",
       " 'makes',\n",
       " 'his',\n",
       " 'escape',\n",
       " 'to',\n",
       " 'Blefuscu',\n",
       " 'His',\n",
       " 'reception',\n",
       " 'there',\n",
       " 'CHAPTER',\n",
       " 'VIII',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'by',\n",
       " 'a',\n",
       " 'lucky',\n",
       " 'accident',\n",
       " 'finds',\n",
       " 'means',\n",
       " 'to',\n",
       " 'leave',\n",
       " 'Blefuscu',\n",
       " 'and',\n",
       " 'after',\n",
       " 'some',\n",
       " 'difficulties',\n",
       " 'returns',\n",
       " 'safe',\n",
       " 'to',\n",
       " 'his',\n",
       " 'native',\n",
       " 'country',\n",
       " 'LIST',\n",
       " 'OF',\n",
       " 'FULL',\n",
       " 'PAGE',\n",
       " 'ILLUSTRATIONS',\n",
       " 'He',\n",
       " 'commanded',\n",
       " 'his',\n",
       " 'generals',\n",
       " 'to',\n",
       " 'draw',\n",
       " 'up',\n",
       " 'the',\n",
       " 'troops',\n",
       " 'Map',\n",
       " 'of',\n",
       " 'Lilliput',\n",
       " 'and',\n",
       " 'Blefuscu',\n",
       " 'I',\n",
       " 'lay',\n",
       " 'all',\n",
       " 'this',\n",
       " 'while',\n",
       " 'in',\n",
       " 'great',\n",
       " 'uneasiness',\n",
       " 'Producing',\n",
       " 'his',\n",
       " 'credentials',\n",
       " 'These',\n",
       " 'gentlemen',\n",
       " 'made',\n",
       " 'an',\n",
       " 'exact',\n",
       " 'inventory',\n",
       " 'Her',\n",
       " 'imperial',\n",
       " 'majesty',\n",
       " 'was',\n",
       " 'pleased',\n",
       " 'to',\n",
       " 'smile',\n",
       " 'very',\n",
       " 'graciously',\n",
       " 'upon',\n",
       " 'me',\n",
       " 'And',\n",
       " 'created',\n",
       " 'me',\n",
       " 'a',\n",
       " 'nardac',\n",
       " 'upon',\n",
       " 'the',\n",
       " 'spot',\n",
       " 'Three',\n",
       " 'hundred',\n",
       " 'tailors',\n",
       " 'were',\n",
       " 'employed',\n",
       " 'The',\n",
       " 'happiness',\n",
       " 'of',\n",
       " 'dining',\n",
       " 'with',\n",
       " 'me',\n",
       " 'He',\n",
       " 'desired',\n",
       " 'I',\n",
       " 'would',\n",
       " 'hear',\n",
       " 'him',\n",
       " 'with',\n",
       " 'patience',\n",
       " 'I',\n",
       " 'set',\n",
       " 'sail',\n",
       " 'at',\n",
       " 'six',\n",
       " 'in',\n",
       " 'the',\n",
       " 'morning',\n",
       " 'AND',\n",
       " 'TWENTY',\n",
       " 'THREE',\n",
       " 'SMALLER',\n",
       " 'ONES',\n",
       " 'IN',\n",
       " 'THE',\n",
       " 'TEXT',\n",
       " 'CONTENTS',\n",
       " 'A',\n",
       " 'VOYAGE',\n",
       " 'TO',\n",
       " 'BROBDINGNAG',\n",
       " 'CHAPTER',\n",
       " 'I',\n",
       " 'A',\n",
       " 'great',\n",
       " 'storm',\n",
       " 'described',\n",
       " 'the',\n",
       " 'long',\n",
       " 'boat',\n",
       " 'sent',\n",
       " 'to',\n",
       " 'fetch',\n",
       " 'water',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'goes',\n",
       " 'with',\n",
       " 'it',\n",
       " 'to',\n",
       " 'discover',\n",
       " 'the',\n",
       " 'country',\n",
       " 'He',\n",
       " 'is',\n",
       " 'left',\n",
       " 'on',\n",
       " 'shore',\n",
       " 'is',\n",
       " 'seized',\n",
       " 'by',\n",
       " 'one',\n",
       " 'of',\n",
       " 'the',\n",
       " 'natives',\n",
       " 'and',\n",
       " 'carried',\n",
       " 'to',\n",
       " 'a',\n",
       " 'farmers',\n",
       " 'house',\n",
       " 'His',\n",
       " 'reception',\n",
       " 'there',\n",
       " 'with',\n",
       " 'several',\n",
       " 'accidents',\n",
       " 'that',\n",
       " 'happened',\n",
       " 'there',\n",
       " 'A',\n",
       " 'description',\n",
       " 'of',\n",
       " 'the',\n",
       " 'inhabitants',\n",
       " 'CHAPTER',\n",
       " 'II',\n",
       " 'A',\n",
       " 'description',\n",
       " 'of',\n",
       " 'the',\n",
       " 'farmers',\n",
       " 'daughter',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'carried',\n",
       " 'to',\n",
       " 'a',\n",
       " 'market',\n",
       " 'town',\n",
       " 'and',\n",
       " 'then',\n",
       " 'to',\n",
       " 'the',\n",
       " 'metropolis',\n",
       " 'The',\n",
       " 'particulars',\n",
       " 'of',\n",
       " 'his',\n",
       " 'journey',\n",
       " 'CHAPTER',\n",
       " 'III',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'sent',\n",
       " 'for',\n",
       " 'to',\n",
       " 'court',\n",
       " 'The',\n",
       " 'queen',\n",
       " 'buys',\n",
       " 'him',\n",
       " 'of',\n",
       " 'his',\n",
       " 'master',\n",
       " 'the',\n",
       " 'farmer',\n",
       " 'and',\n",
       " 'presents',\n",
       " 'him',\n",
       " 'to',\n",
       " 'the',\n",
       " 'king',\n",
       " 'He',\n",
       " 'disputes',\n",
       " 'with',\n",
       " 'his',\n",
       " 'majestys',\n",
       " 'great',\n",
       " 'scholars',\n",
       " 'An',\n",
       " 'apartment',\n",
       " 'at',\n",
       " 'court',\n",
       " 'provided',\n",
       " 'for',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'He',\n",
       " 'is',\n",
       " 'in',\n",
       " 'high',\n",
       " 'favor',\n",
       " 'with',\n",
       " 'the',\n",
       " 'queen',\n",
       " 'He',\n",
       " 'stands',\n",
       " 'up',\n",
       " 'for',\n",
       " 'the',\n",
       " 'honor',\n",
       " 'of',\n",
       " 'his',\n",
       " 'own',\n",
       " 'country',\n",
       " 'He',\n",
       " 'quarrels',\n",
       " 'with',\n",
       " 'the',\n",
       " 'queens',\n",
       " 'dwarf',\n",
       " 'CHAPTER',\n",
       " 'IV',\n",
       " 'The',\n",
       " 'country',\n",
       " 'described',\n",
       " 'A',\n",
       " 'proposal',\n",
       " 'for',\n",
       " 'correcting',\n",
       " 'modern',\n",
       " 'maps',\n",
       " 'The',\n",
       " 'kings',\n",
       " 'palace',\n",
       " 'and',\n",
       " 'some',\n",
       " 'account',\n",
       " 'of',\n",
       " 'the',\n",
       " 'metropolis',\n",
       " 'The',\n",
       " 'Authors',\n",
       " 'way',\n",
       " 'of',\n",
       " 'travelling',\n",
       " 'The',\n",
       " 'chief',\n",
       " 'temple',\n",
       " 'described',\n",
       " 'CHAPTER',\n",
       " 'V',\n",
       " 'Several',\n",
       " 'adventures',\n",
       " 'that',\n",
       " 'happened',\n",
       " 'to',\n",
       " 'the',\n",
       " 'Author',\n",
       " 'The',\n",
       " 'execution',\n",
       " 'of',\n",
       " 'a',\n",
       " 'criminal',\n",
       " 'The',\n",
       " 'Author',\n",
       " 'shows',\n",
       " 'his',\n",
       " 'skill',\n",
       " 'in',\n",
       " ...]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "verne.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers=np.random.randint(0,10,100000)\n",
    "\n",
    "count={}\n",
    "\n",
    "for num in numbers:\n",
    "    if num in count:\n",
    "        count[num]+=1\n",
    "    else:\n",
    "        count[num]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{6: 10022, 4: 9964, 7: 10101, 5: 9824, 8: 9831, 3: 10117, 9: 10075, 0: 10075, 1: 9989, 2: 10002}\n"
     ]
    }
   ],
   "source": [
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 3, 2, 9, 7, 2, 5, 4, 9, 7, 1, 5, 0, 1, 7, 0, 3, 2, 9, 6, 4, 5,\n",
       "       8, 1, 5, 0, 7, 1, 7, 9, 9, 5, 6, 2, 4, 6, 5, 7, 3, 7, 9, 3, 4, 1,\n",
       "       1, 1, 8, 5, 5, 1])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers[:50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10022"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count[6]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `sorted`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Hello', 'Hi', 'good morning', 'howdy']"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist=['howdy','Hello','Hi','good morning']\n",
    "sorted(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['howdy', 'Hello', 'Hi', 'good morning']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "myl=sorted(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Hello', 'Hi', 'good morning', 'howdy']"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['howdy', 'good morning', 'Hi', 'Hello']"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(mylist,reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{6: 10022, 4: 9964, 7: 10101, 5: 9824, 8: 9831, 3: 10117, 9: 10075, 0: 10075, 1: 9989, 2: 10002}\n"
     ]
    }
   ],
   "source": [
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0, 10075), (1, 9989), (2, 10002), (3, 10117), (4, 9964), (5, 9824), (6, 10022), (7, 10101), (8, 9831), (9, 10075)]\n"
     ]
    }
   ],
   "source": [
    "print(sorted(count.items()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_items([(6, 10022), (4, 9964), (7, 10101), (5, 9824), (8, 9831), (3, 10117), (9, 10075), (0, 10075), (1, 9989), (2, 10002)])\n"
     ]
    }
   ],
   "source": [
    "print(count.items())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[10, 2, 0], [6, 7, 8], [5, 2, 2], [4, 7, 10]]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grades =[ [4,7,10], [5,2,2], [6,7,8], [10,2,0] ] \n",
    "sorted(grades,reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def avg(mylist):\n",
    "    return sum(mylist)/len(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4, 7, 10], [6, 7, 8], [10, 2, 0], [5, 2, 2]]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(grades,key=avg,reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4, 7, 10], [6, 7, 8], [10, 2, 0], [5, 2, 2]]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(grades,key=np.mean,reverse=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ex** sort the students based on their quiz 3 grade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quiz3(mylist):\n",
    "    return mylist[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[4, 7, 10], [6, 7, 8], [5, 2, 2], [10, 2, 0]]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(grades,key=quiz3,reverse=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## bar plot\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "country=[\"China\",\"USA\",\"Italy\",\"Brazil\"]\n",
    "pop = [1398,328,60,211]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(country,pop,color=\"r\");\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=plt.bar(country,pop,color=\"r\")\n",
    "x[0].set_color(\"b\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=plt.bar(range(4),pop,color=\"r\",tick_label=country)\n",
    "x[0].set_color(\"b\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.linspace(1,10,1000)\n",
    "y1=2*x\n",
    "y2=np.exp(-x)\n",
    "y3=np.log(x)\n",
    "y4=x**2+3*x\n",
    "y5=1/x\n",
    "\n",
    "def logplot(x,y,t=\"\"):\n",
    "    \n",
    "\n",
    "    plt.figure(figsize=(12,6))\n",
    "    plt.subplot(141)\n",
    "    plt.plot(x,y)\n",
    "    plt.title(\"x ; y\")\n",
    "    plt.subplot(142)\n",
    "    plt.plot(np.log(x),y)\n",
    "    plt.title(\"log-x ; y\")\n",
    "    plt.subplot(143)\n",
    "    plt.plot(x,np.log(y))\n",
    "    plt.title(\"x ; log-y\")\n",
    "    plt.subplot(144)\n",
    "    plt.plot(np.log(x),np.log(y))\n",
    "    plt.title(\"log-x ; log-y\")\n",
    "    \n",
    "    plt.suptitle(t)\n",
    "\n",
    "    return None\n",
    "\n",
    "\n",
    "\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "logplot(x,y1,\"Linear\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "logplot(x,y2,t=\"Exponential\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
