{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Week 06"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Monday"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Building block -> `arrays`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3] [1 2 3]\n"
     ]
    }
   ],
   "source": [
    "numlist=[1,2,3]\n",
    "numarray= np.array(numlist) # create array from list\n",
    "print(numlist,numarray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(numlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(numarray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5, 10, 15])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numarray * 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numlist*5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  1,  32, 243], dtype=int32)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numarray**5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1]\n"
     ]
    }
   ],
   "source": [
    "print(numarray//2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5 6]\n"
     ]
    }
   ],
   "source": [
    "x=np.array(range(1,7))\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`numpy` has its own version of the most common functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791,\n",
       "       1.79175947])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.log(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math as m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "only size-1 arrays can be converted to Python scalars",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-16-1507bd675c34>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: only size-1 arrays can be converted to Python scalars"
     ]
    }
   ],
   "source": [
    "m.log(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can still iterate on arrays, the same way you would do with lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "for k in x:\n",
    "    print(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can still slice arrays, the same way you would slice lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([200,   3,   5])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[::2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Arrays are mutable (like lists) and slicing will not produce a copy (unlike lists)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[200   2   3   4   5   6] [200   2   3   4   5   6]\n"
     ]
    }
   ],
   "source": [
    "y=x\n",
    "y[0]=200\n",
    "print(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[200 300   3   4   5   6] [200 300   3   4   5   6] [200 300   3   4   5   6]\n"
     ]
    }
   ],
   "source": [
    "z=x[:]\n",
    "z[1] = 300\n",
    "print(x,y,z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[200 300   3   4   5   6] [200 300 400   4   5   6]\n"
     ]
    }
   ],
   "source": [
    "w = x.copy()\n",
    "w[2] = 400\n",
    "\n",
    "print(x,w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary\n",
    "\n",
    "* their size cannot be changed after creation\n",
    "* they can contain only objects of the same type\n",
    "* can be sliced, and indexed as lists\n",
    "* are mutable (like lists)\n",
    "* slicing creates a 'view' of the array (not a new array)\n",
    "* support vectorial operations (unlike lists)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How to create an array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. `np.array`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mylist = [1,2,3,4,5,6,7,8,9]\n",
    "myarray = np.array(mylist)\n",
    "myarray"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. `np.ones` or `np.zeros`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 1., 1.])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.ones(4)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=np.zeros(5)\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ex.** how do we create an array with 7 elements, all 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4., 4., 4., 4., 4., 4., 4.])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "4*np.ones(7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. `np.empty` this will create an \"empty\" array (array of values not initialized. quicker than `np.zeros` and `np.ones` for large arrays)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.69314718, 1.09861229, 1.38629436, 1.60943791,\n",
       "       1.79175947])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e = np.empty(6)\n",
    "e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. `np.arange()` works exactly like range, but allows for not integer entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.  0.5 1.  1.5 2.  2.5 3.  3.5 4. ]\n"
     ]
    }
   ],
   "source": [
    "a=np.arange(0,4.5,0.5)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.5 -0.5  0.5  1.5  2.5  3.5]\n"
     ]
    }
   ],
   "source": [
    "b=np.arange(-1.5,4.5)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. `np.linspace(s,e,p)` : `s`:starting point; `e`:end point; `p`: how many points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linspace(0,10,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "from time import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1615227501.7924623"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "58.47716546058655\n"
     ]
    }
   ],
   "source": [
    "startt = time()\n",
    "y=[m.cos(k) for k in range(10**8)]\n",
    "endt = time()\n",
    "print(endt-startt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.524827480316162\n"
     ]
    }
   ],
   "source": [
    "startt = time()\n",
    "y=np.cos(np.arange(10**8))\n",
    "endt= time()\n",
    "print(endt-startt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## `subplot`\n",
    "\n",
    "`plt.subplot(r,c,p)`: \n",
    "* `r`: number of rows\n",
    "* `c`: number of columns\n",
    "* `p`: position (starting at 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**ex.** produce a 3x2 subplot, $x\\in [-\\pi,\\pi]$ use 101 points\n",
    "\n",
    "* $y=\\cos(x)$ in position 1, color blue\n",
    "* $y=\\sin(2x)$ in position 2, color green\n",
    "* $y=0.5 x^2 -x +3$ in position 4, color magenta\n",
    "* $y=\\tan(x)$ in position 5, color yellow\n",
    "\n",
    "\n",
    "post the image on discord, in the **subplot** channel\n",
    "\n",
    "Use `plt.title()` for each subplot\n",
    "\n",
    "Use `plt.suptitle()` for the major title which should be your **first, last name**\n",
    "\n",
    "reminder `plt.subplots_adjust(wspace = ,hspace =)`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "use `np.linspace` to generate $x$\n",
    "\n",
    "```\n",
    "plt.subplot(3,2,1)\n",
    "plt.plot(x,y)```\n",
    "\n",
    "```\n",
    "plt.subplot(3,2,2)\n",
    "plt.plot(x,y)```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Project 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return x**2 - 5 *x + 4\n",
    "\n",
    "def fp(x):\n",
    "    return 2*x - 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.linspace(0,6,101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "plt.subplot(1,2,1)\n",
    "plt.plot(x,f(x),'r--')\n",
    "plt.plot([0,6],[0,0],'m:',linewidth = 1)\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(x,fp(x),'b:');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def myfun(x,f):\n",
    "    y=f(x)\n",
    "    return y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myfun(2,fp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "def newton(x0,f,fp):\n",
    "    ....\n",
    "    return next iteration\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1. , -0.8, -0.6, -0.4, -0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.linspace(-1,1,11)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.  ,  8.64,  7.36,  6.16,  5.04,  4.  ,  3.04,  2.16,  1.36,\n",
       "        0.64,  0.  ])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myfun(x,f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1f41103aa58>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,1/x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Complex numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1+2j)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = complex(1,2) # real, imaginary part \n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z.real"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z.imag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-3+4j)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-4-6j)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myfun(z,f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = np.linspace(-1,1,6)\n",
    "i = np.linspace(complex(0,-1),complex(0,1),6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.  -0.6 -0.2  0.2  0.6  1. ] \n",
      "\n",
      " [0.-1.j  0.-0.6j 0.-0.2j 0.+0.2j 0.+0.6j 0.+1.j ]\n"
     ]
    }
   ],
   "source": [
    "print(r,'\\n\\n',i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1.  -0.6 -0.2  0.2  0.6  1. ]\n",
      " [-1.  -0.6 -0.2  0.2  0.6  1. ]\n",
      " [-1.  -0.6 -0.2  0.2  0.6  1. ]\n",
      " [-1.  -0.6 -0.2  0.2  0.6  1. ]\n",
      " [-1.  -0.6 -0.2  0.2  0.6  1. ]\n",
      " [-1.  -0.6 -0.2  0.2  0.6  1. ]] \n",
      "\n",
      " [[0.-1.j  0.-1.j  0.-1.j  0.-1.j  0.-1.j  0.-1.j ]\n",
      " [0.-0.6j 0.-0.6j 0.-0.6j 0.-0.6j 0.-0.6j 0.-0.6j]\n",
      " [0.-0.2j 0.-0.2j 0.-0.2j 0.-0.2j 0.-0.2j 0.-0.2j]\n",
      " [0.+0.2j 0.+0.2j 0.+0.2j 0.+0.2j 0.+0.2j 0.+0.2j]\n",
      " [0.+0.6j 0.+0.6j 0.+0.6j 0.+0.6j 0.+0.6j 0.+0.6j]\n",
      " [0.+1.j  0.+1.j  0.+1.j  0.+1.j  0.+1.j  0.+1.j ]]\n"
     ]
    }
   ],
   "source": [
    "rr,ii = np.meshgrid(r,i)\n",
    "print(rr,'\\n\\n',ii)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1. -1.j  -0.6-1.j  -0.2-1.j   0.2-1.j   0.6-1.j   1. -1.j ]\n",
      " [-1. -0.6j -0.6-0.6j -0.2-0.6j  0.2-0.6j  0.6-0.6j  1. -0.6j]\n",
      " [-1. -0.2j -0.6-0.2j -0.2-0.2j  0.2-0.2j  0.6-0.2j  1. -0.2j]\n",
      " [-1. +0.2j -0.6+0.2j -0.2+0.2j  0.2+0.2j  0.6+0.2j  1. +0.2j]\n",
      " [-1. +0.6j -0.6+0.6j -0.2+0.6j  0.2+0.6j  0.6+0.6j  1. +0.6j]\n",
      " [-1. +1.j  -0.6+1.j  -0.2+1.j   0.2+1.j   0.6+1.j   1. +1.j ]]\n"
     ]
    }
   ],
   "source": [
    "z=rr+ii\n",
    "\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multidimensional array (`numpy`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12.]\n"
     ]
    }
   ],
   "source": [
    "a=np.linspace(1,12,12)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12,)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.  3.  4.]\n",
      " [ 5.  6.  7.  8.]\n",
      " [ 9. 10. 11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "b=a.reshape(3,4)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 4)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.]\n",
      " [ 3.  4.]\n",
      " [ 5.  6.]\n",
      " [ 7.  8.]\n",
      " [ 9. 10.]\n",
      " [11. 12.]]\n"
     ]
    }
   ],
   "source": [
    "c=a.reshape(6,-1)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 2)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b[1,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  1.   2.   3.   4.   5. 300.   7.   8.   9.  10.  11.  12.] [[  1.   2.   3.   4.]\n",
      " [  5. 300.   7.   8.]\n",
      " [  9.  10.  11.  12.]] [[  1.   2.]\n",
      " [  3.   4.]\n",
      " [  5. 300.]\n",
      " [  7.   8.]\n",
      " [  9.  10.]\n",
      " [ 11.  12.]]\n"
     ]
    }
   ],
   "source": [
    "b[1,1]=300\n",
    "print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "d=a.reshape(-1,3).copy()\n",
    "d[1,2]=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  2.  3.]\n",
      " [ 4.  5.  0.]\n",
      " [ 7.  8.  9.]\n",
      " [10. 11. 12.]] [  1.   2.   3.   4.   5. 300.   7.   8.   9.  10.  11.  12.]\n"
     ]
    }
   ],
   "source": [
    "print(d,a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`np.ones()`, `np.zeros()`, `np.empty()` still work"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.],\n",
       "       [1., 1., 1., 1., 1., 1.]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e=np.ones((4,6))\n",
    "e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  2,  3,  4],\n",
       "       [ 5,  6,  7,  8],\n",
       "       [ 9, 10, 11, 12]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.arange(1,13).reshape(3,4)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13., 14., 15., 16.],\n",
       "       [17., 18., 19., 20.],\n",
       "       [21., 22., 23., 24.]])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=np.linspace(13,24,12).reshape(3,4)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14., 16., 18., 20.],\n",
       "       [22., 24., 26., 28.],\n",
       "       [30., 32., 34., 36.]])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 13.,  28.,  45.,  64.],\n",
       "       [ 85., 108., 133., 160.],\n",
       "       [189., 220., 253., 288.]])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a*b # element by element multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "matrix multiplication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 4)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 2)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=np.arange(8).reshape(4,2)\n",
    "c.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[184., 242.],\n",
       "       [232., 306.],\n",
       "       [280., 370.]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b@c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[184., 242.],\n",
       "       [232., 306.],\n",
       "       [280., 370.]])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.dot(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "shapes (4,2) and (3,4) not aligned: 2 (dim 1) != 3 (dim 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-58-c72b22f75651>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: shapes (4,2) and (3,4) not aligned: 2 (dim 1) != 3 (dim 0)"
     ]
    }
   ],
   "source": [
    "c.dot(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[13., 14., 15., 16.],\n",
       "       [17., 18., 19., 20.],\n",
       "       [21., 22., 23., 24.]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.56494936, 2.63905733, 2.7080502 , 2.77258872],\n",
       "       [2.83321334, 2.89037176, 2.94443898, 2.99573227],\n",
       "       [3.04452244, 3.09104245, 3.13549422, 3.17805383]])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.log(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11, 12, 13, 14, 15],\n",
       "       [16, 17, 18, 19, 20, 21, 22, 23],\n",
       "       [24, 25, 26, 27, 28, 29, 30, 31],\n",
       "       [32, 33, 34, 35, 36, 37, 38, 39]])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.arange(40).reshape(5,8)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8,  9, 10, 11, 12, 13, 14, 15])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[1,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8,  9, 10, 11, 12, 13, 14, 15])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 4, 12, 20, 28, 36])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[:,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[16, 17, 18, 19, 20, 21, 22, 23],\n",
       "       [24, 25, 26, 27, 28, 29, 30, 31]])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[2:-1,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  2,  4,  6],\n",
       "       [16, 18, 20, 22],\n",
       "       [32, 34, 36, 38]])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[::2,::2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[40,  1, 40,  3, 40,  5, 40,  7],\n",
       "       [ 8,  9, 10, 11, 12, 13, 14, 15],\n",
       "       [40, 17, 40, 19, 40, 21, 40, 23],\n",
       "       [24, 25, 26, 27, 28, 29, 30, 31],\n",
       "       [40, 33, 40, 35, 40, 37, 40, 39]])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[::2,::2]=40\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[40,  1,  1,  2, 40,  5, 40,  7],\n",
       "       [ 8,  9,  3,  4, 12, 13, 14, 15],\n",
       "       [40, 17,  5,  6, 40, 21, 40, 23],\n",
       "       [24, 25,  7,  8, 28, 29, 30, 31],\n",
       "       [40, 33,  9, 10, 40, 37, 40, 39]])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=np.linspace(1,10,10).reshape(5,2)\n",
    "a[:,2:4]=y\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([40,  1,  1,  2, 40,  5, 40,  7,  8,  9,  3,  4, 12, 13, 14, 15, 40,\n",
       "       17,  5,  6, 40, 21, 40, 23, 24, 25,  7,  8, 28, 29, 30, 31, 40, 33,\n",
       "        9, 10, 40, 37, 40, 39])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=a.ravel()\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(a);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1f411217748>"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(a,cmap='seismic');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1f411590c50>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=np.linspace(0,1,11).reshape(1,11)\n",
    "plt.imshow(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
